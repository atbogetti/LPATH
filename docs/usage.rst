Usage
=====

This page details how to use ``mPHAT``.  Follow the `Getting Started`_ page to learn how to install ``mPHAT``.

.. _Getting Started: https://mphat.readthedocs.io/en/latest/getting_started.html


Introduction
------------
``mPHAT`` is made of three separate steps: ``discretize``, ``extract``, and ``match``. All these steps take a variety of different parameters, which are all listed in the `API`_ page.

1. The ``discretize`` step is used to discretize your trajectories for the purpose of finding successful transitions.
2. The ``extract`` step takes what's assigned in ``discretize`` and identifies all instances where there is a successful transition.
3. The ``match`` step takes what's outputted in ``extract`` and cross pattern match to identify pathway classes. It is possible to reassign states in this step.


There are three different ways of running these steps. Due to the sheer amount of parameter options, it is recommended that users start with the Jupyter notebook.

1. Import each step's ``main()`` function and run everything in an interactive python session (e.g., Jupyter notebook).  **[RECOMMENDED]**
2. Run through the command line (e.g., ``mphat discretize -I west.h5 --assign-arguments '--config-from-file --scheme TEST'``.
3. Run each python script directly (e.g., ``python mphat/mphat.py``).


.. _API: https://mphat.readthedocs.io/en/latest/api.html

Molecular Dynamics
------------------
``mPHAT`` is written to cluster pathways from molecular dynamics simulation. The input file will be a numpy or text file of the features used to assign states. For example, an alanine dipeptide system will use the phi, psi angles.

Discretize
__________

An example ``assign`` function (in a file called ``module.py``) for assigning two states based on the phi/psi angle::

    def assign_dih(input_array):
        """
        This is an example function for mapping a list of features to state IDs. This should be subclassed.

        Parameters
        ----------
        input_array : numpy.ndarray
            An array generated from load_file.

        Returns
        -------
        state_list : list
            A list containing
        """
        state_list = []
        for val in input_array:
            if val[0] >= -180 and val[0] <= -45 and val[1] >= -55 and val[1] <= 30:  # Phi/Psi for Alpha Helix
                state_list.append(0)
            elif val[0] >= 165 and val[0] <= 180 and val[1] >= -55 and val[1] <= 30:
                state_list.append(0)
            elif val[0] >= -170 and val[0] <= -55 and val[1] >= 40 and val[1] <= 100:  # Phi/Psi for C7eq
                state_list.append(1)
            elif val[0] >= 25 and val[0] <= 90 and val[1] >= -55 and val[1] <= 0:  # Phi/Psi for C7ax
                state_list.append(2)
            else:
                state_list.append(-1)

        return state_list


We will monkey-patch this function into ``mPHAT``.

1. From the command line, run the following::

    mphat discretize -I dihedral.npy -O states.npy -af module.assign_dih

2. This will generate a ``states.npy`` file to be used in the ``extract`` step.

Extract
_______

[UNDER CONSTRUCTION]


Match
_____

[UNDER CONSTRUCTION]


Weighted Ensemble Simulations
-----------------------------
``mPHAT`` is written to cluster pathways generated by the `WESTPA`_ software suite. Make sure `WESTPA`_ is installed. See the `Getting Started`_ page for more information.

.. _WESTPA: https://westpa.github.io/

Discretize
__________
We will use `WESTPA`_'s ``w_assign`` tool to assign to states. See the tool's `wiki`_ page and `Sphinx`_ documentation for more information about the tool.

.. _wiki: https://github.com/westpa/westpa/wiki/man:w_assign
.. _Sphinx: https://westpa.readthedocs.io/en/latest/documentation/cli/w_assign.html


We'll try to discretize a ``multi.h5`` (generated with ``w_multi_west --ibstates``) with ``w_assign`` based on what's defined with the ``TEST`` scheme in the ``west.cfg``.

1. Run the following in the command line to run ``w_assign``::

    mphat discretize -we -W multi.h5 -A ANALYSIS/TEST/assign.h5 \
        --assign-args "-W multi.h5 -r west.cfg --states-from-config --scheme TEST"


Extract
_______

[UNDER CONSTRUCTION]


Match
_____


[UNDER CONSTRUCTION]

